name: Del workflow runs->Monitor outdated pkgs->Update and release
on:
  push:
jobs:
  del_runs:
    runs-on: ubuntu-latest
    steps:
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0
  # monitor:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #     - name: Check for outdated pkgs
  #       id: pkg-matrix
  #       run: |
  #         api_url="https://api.github.com"
  #         json=$(cat pkg_info.json)
  #         packages=$(echo "$json" | jq '.packages')
  #         flag="false"
  #         outdated_pkgs=""
  #         for package in $(echo "$packages" | jq -c '.[]'); do
  #           # Use jq to extract the repo,pkg,sha fields
  #           repo=$(echo "$package" | jq -r '.repo')
  #           pkg=$(echo "$package" | jq -r '.pkg')
  #           old_sha=$(echo "$package" | jq -r '.sha')
  #           # Get the latest commit hash on the default branch
  #           default_branch=$(curl -s "$api_url/repos/$repo" | jq -r '.default_branch')
  #           new_sha=$(curl -s "$api_url/repos/$repo/commits/$default_branch" | jq -r '.sha')
  #           # Judge
  #           if [ "$new_sha" != "$old_sha" ]; then
  #             if [ "$flag" == "false" ]; then
  #               flag="true"
  #             fi
  #             if [ "$outdated_pkgs" = "" ]; then
  #               outdated_pkgs=\"$pkg\"
  #             else
  #               outdated_pkgs=$outdated_pkgs,\"$pkg\"
  #             fi
  #             # Update the sha value in the JSON string
  #             json=$(echo "$json" | jq --arg repo "$repo" --arg pkg "$pkg" --arg sha "$new_sha" '.packages |= map(if (.repo == $repo and .pkg == $pkg) then .sha = $sha else . end)')
  #           fi
  #         done
  #         echo "flag=$flag" >>$GITHUB_OUTPUT
  #         if [ "$flag" == "true" ]; then
  #           # Save the updated JSON string to a file
  #           echo "$json" >pkg_info.json
  #           # define the updatable_pkgs output
  #           updatable_pkgs=$((
  #             echo '{ "repos" : ['
  #             echo $outdated_pkgs
  #             echo " ]}"
  #           ) | jq -c .)
  #           echo "updatable_pkgs=$updatable_pkgs" >> $GITHUB_OUTPUT
  #           # git push
  #           git config user.name github-actions
  #           git config user.email github-actions@github.com
  #           git add .
  #           git commit -m "update"
  #           git push
  #         fi
  #   outputs:
  #     updatable_pkgs: ${{ steps.pkg-matrix.outputs.updatable_pkgs }}
  #     flag: ${{ steps.monitor.outputs.flag }}
  # update:
  #   needs: monitor
  #   if: ${{ needs.monitor.outputs.flag }} == "true"
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write
  #   strategy:
  #     matrix: ${{ fromJSON(needs.monitor.outputs.updatable_pkgs) }}
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v3
  #     - uses: ./build-aur-action
  #       with:
  #         repo-name: ${{ matrix.repos }}
  #     - name: Prepare a unique name for Artifacts
  #       id: prep_artifact_name
  #       run: |
  #         if [ "${{ matrix.repos }}" != "" ] ; then
  #             name="${{ matrix.repos }}"
  #         fi
  #         name=$(echo -n ${name##*/})
  #         echo "ARTIFACT_NAME=$name" >> $GITHUB_ENV
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         path: ./*/*.pkg.tar.zst
  #         name: ${{ env.ARTIFACT_NAME }}
  #         if-no-files-found: error
  #     - uses: ncipollo/release-action@v1
  #       with:
  #         allowUpdates: true
  #         tag: "packages"
  #         artifacts: "./*/*.zst"
  #         token: ${{ secrets.GITHUB_TOKEN }}

# name: BUILD
# on:
#   push:
#   # schedule:
#   #   - cron:  '0 20 * * *'
# jobs:
#   build-matrix:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3
#       - id: set-matrix
#         run: |
#           matrix=$((
#             echo '{ "repos" : ['
#             jq -c '.packages[].repo' pkg_info.json | paste -sd,
#             echo " ]}"
#           ) | jq -c .)
#           echo $matrix
#           echo $matrix | jq .
#           echo "matrix=$matrix" >> $GITHUB_OUTPUT
#     outputs:
#       pkg-matrix: ${{steps.set-matrix.outputs.matrix}}
#   check-matrix:
#     runs-on: ubuntu-latest
#     needs: build-matrix
#     steps:
#       - name: Install json2yaml
#         run: |
#           sudo npm install -g json2yaml
#       - name: Check matrix definition
#         run: |
#           matrix='${{ needs.build-matrix.outputs.pkg-matrix }}'
#           echo $matrix
#           echo $matrix | jq .
#           echo $matrix | json2yaml
#   build:
#     runs-on: ubuntu-latest
#     needs: build-matrix
#     strategy:
#       matrix: ${{ fromJson(needs.build-matrix.outputs.pkg-matrix) }}
#       # repos: [aur/wayfire-git, hyprland-git]
#       fail-fast: false
#     permissions:
#       contents: write
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3
#       - uses: ./build-aur-action
#         with:
#           repo-name: ${{ matrix.repos }}
#       - name: Prepare a unique name for Artifacts
#         id: prep_artifact_name
#         run: |
#           if [ "${{ matrix.repos }}" != "" ] ; then
#               name="${{ matrix.repos }}"
#           fi
#           name=$(echo -n "${name##*/}")
#           echo "ARTIFACT_NAME=$name" >> $GITHUB_ENV
#       - uses: actions/upload-artifact@v3
#         with:
#           path: ./*/*.pkg.tar.zst
#           name: ${{ env.ARTIFACT_NAME }}
#           if-no-files-found: error
#       - uses: ncipollo/release-action@v1
#         with:
#           allowUpdates: true
#           tag: "packages"
#           artifacts: "./*/*.zst"
#           token: ${{ secrets.GITHUB_TOKEN }}
