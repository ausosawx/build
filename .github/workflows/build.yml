name: Monitor Repository
on:
  schedule:
    - cron: '*/2 * * * *'
  push:
jobs:
  monitor:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Check for new commits
        id: check_commits
        run: |
          REPO_OWNER=ausosawx
          REPO_NAME=dotfiles
          API_URL=https://api.github.com

          # Get the default branch name
          BRANCH_NAME=$(curl -s "${API_URL}/repos/${REPO_OWNER}/${REPO_NAME}" | jq -r '.default_branch')

          # Get the latest commit hash on the default branch
          COMMIT_HASH=$(curl -s "${API_URL}/repos/${REPO_OWNER}/${REPO_NAME}/commits/${BRANCH_NAME}" | jq -r '.sha')

          # Get the latest commit hash on the default branch from the previous run
          PREV_COMMIT_HASH=$(cat ${GITHUB_WORKSPACE}/commit_hash.txt || echo "")

          # If the latest commit hash is different from the previous run, there is a new commit
          if [ "${COMMIT_HASH}" != "${PREV_COMMIT_HASH}" ]; then
            # echo "true" > ${GITHUB_WORKSPACE}/commit_flag.txt
            echo "commit_flag=true" >> $GITHUB_OUTPUT
          fi

          # Store the latest commit hash for the next run
          echo "${COMMIT_HASH}" > ${GITHUB_WORKSPACE}/commit_hash.txt
      - name: Set Output
        if: steps.check_commits.outputs.commit_flag == 'true'
        run: |
          echo "new_commit=true" >> $GITHUB_OUTPUT

# name: BUILD
# on:
#   push:
#   # schedule:
#   #   - cron:  '0 20 * * *'
# jobs:
#   build:
#     strategy:
#       matrix:
#         repo-name: [aur/wayfire-git]
#       fail-fast: false
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3
#       - uses: ./build-aur-action
#         with:
#           repo-name: ${{ matrix.repo-name }}
#       - name: Prepare a unique name for Artifacts
#         id: prep_artifact_name
#         run: |
#           if [ "${{ matrix.repo-name }}" != "" ] ; then
#               name="${{ matrix.repo-name }}"
#           fi
#           name=$(echo -n "${name##*/}")
#           echo "ARTIFACT_NAME=$name" >> $GITHUB_ENV
#       - uses: actions/upload-artifact@v3
#         with:
#           path: ./*/*.pkg.tar.zst
#           name: ${{ env.ARTIFACT_NAME }}
#           if-no-files-found: error
#       - uses: ncipollo/release-action@v1
#         with:
#           allowUpdates: true
#           tag: "packages"
#           artifacts: "./*/*.zst"
#           token: ${{ secrets.GITHUB_TOKEN }}
